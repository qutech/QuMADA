#%% Imports
import json
import yaml

from qcodes.station import Station
from qcodes_contrib_drivers.drivers.QDevil.QDAC1 import QDac
from qumada.instrument.custom_drivers.ZI.MFLI import MFLI
from qcodes.dataset import (
    Measurement,
    experiments,
    initialise_or_create_database_at,
    load_by_run_spec,
    load_or_create_experiment,
)
from qumada.instrument.mapping.QDevil.qdac import QDacMapping
from qumada.instrument.mapping import (
    add_mapping_to_instrument,
    QDAC_MAPPING,
    MFLI_MAPPING,
    map_terminals_gui)
from qumada.measurement.scripts import (
    Generic_1D_Sweep,
    Generic_nD_Sweep,
    Generic_1D_parallel_Sweep,
    Timetrace)
from qumada.utils.load_from_sqlite_db import load_db
from qumada.utils.generate_sweeps import generate_sweep, replace_parameter_settings
from qumada.utils.ramp_parameter import *
#%% Experiment Setup

# Setup qcodes station
station = Station()

# Setup instruments
# Call add_mapping_to_instrument(instrument, mapping) to map the instrument's parameters to QuMADA-specific names.

qdac = QDac("qdac", "ASRL5::INSTR")
add_mapping_to_instrument(qdac, mapping = QDacMapping())
station.add_component(qdac)

mfli = MFLI("mfli", "DEV4039", serverhost = "192.168.1.142")
add_mapping_to_instrument(mfli, mapping = MFLI_MAPPING)
station.add_component(mfli)

#%% Measurement Setup

# Set path for measurement data db
load_db()
# load_db("path/to/measurements.db")
#%% Set Parameters

parameters = {
    "Source Drain": {
        "amplitude": {
            "type": "static",
            "value": 1e-4,
        },
        "current": {
            "type": "gettable",
            "break_conditions": ["val > 1e-9"],
        },
        "frequency": {
            "type": "static",
            "value": 773,
        }
    },
    "Topgate": {
        "voltage": {
            "type": "static",
            "value": 0.6,
        },
    },
    "Left Barrier": {
        "voltage": {
            "type": "dynamic",
            "start": 0,
            "stop": 0.5,
            "num_points": 100,
            "delay": 0,
        },
    },
    "Right Barrier": {
        "voltage": {
            "type": "dynamic",
            "setpoints": generate_sweep(0, 0.5, 100),
            "delay": 0,
        },
    },
}
#%%
script = Generic_1D_Sweep()
script.setup(parameters, metadata = None, measurement_name = "Test1")
#%% Map measurement gates to instrument gates
"""
As shown below, you can use existing mappings and pass them to the mapping method in order
to skip the process for later measurements. Thanks to the try-except block, you do
not have to change this cell - it will work for the first measurement and follow-up
measurements.
"""
try:
    mapping
except:
    mapping = {}
map_terminals_gui(station.components, script.gate_parameters, mapping, monitoring=True)
mapping = script.gate_parameters
#%%
# run script
script.run()
