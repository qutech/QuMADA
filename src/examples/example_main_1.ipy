# %% Experiment Setup

import threading

import numpy as np
import yaml
from qcodes.dataset import (
    Measurement,
    experiments,
    initialise_or_create_database_at,
    load_by_run_spec,
    load_or_create_experiment,
)
from qcodes.station import Station

from qumada.instrument.buffered_instruments import BufferedDummyDMM as DummyDmm
from qumada.instrument.buffers.buffer import (
    load_trigger_mapping,
    map_triggers,
    save_trigger_mapping,
)
from qumada.instrument.custom_drivers.Dummies.dummy_dac import DummyDac
from qumada.instrument.mapping import (
    DUMMY_DMM_MAPPING,
    add_mapping_to_instrument,
    map_terminals_gui,
)
from qumada.instrument.mapping.Dummies.DummyDac import DummyDacMapping
from qumada.measurement.device_object import *
from qumada.measurement.scripts import (
    Generic_1D_parallel_Sweep,
    Generic_1D_Sweep,
    Generic_1D_Sweep_buffered,
    Generic_nD_Sweep,
    Timetrace,
)
from qumada.utils.generate_sweeps import generate_sweep
from qumada.utils.load_from_sqlite_db import load_db

# %% Only required to simulate buffered instruments
# As we have only dummy instruments that are not connected, we have to use a global
# trigger event for triggering.

# Setup qcodes station and load instruments
station = Station()

# The dummy instruments have a trigger_event attribute as replacement for
# the trigger inputs of real instruments.

# Creating QCoDeS Instrument. For buffered instruments we have to use the QuMada buffered version.
dmm = DummyDmm("dmm")
# Adding the QuMada mapping
add_mapping_to_instrument(dmm, mapping=DUMMY_DMM_MAPPING)
# Add QCoDes Instrument to station
station.add_component(dmm)

dac1 = DummyDac("dac1")
add_mapping_to_instrument(dac1, mapping=DummyDacMapping())
station.add_component(dac1)

dac2 = DummyDac("dac2")
add_mapping_to_instrument(dac2, mapping=DummyDacMapping())
station.add_component(dac2)
# %% Load database for data storage. This will open a window.
# Alternatively, you can use initialise_or_create_database_at from QCoDeS
load_db()
# We need to create an experiment in the QCoDeS database
load_or_create_experiment("test", "dummy_sample")

#%% Metadata Setup
from qtools_metadata.metadata import create_metadata, save_metadata_object_to_db

db.api_url = "http://134.61.7.48:9124"
metadata = create_metadata()

# %% Parameters
# This dictionary defines your device. "ohmic", "gate1" and "gate2" are terminals, representing parts of your
# device.
# Each terminal can have multiple parameters that represent values of the terminals
# (here "current" and "voltage"). A real Ohmic connected to a lockin-amplifier could for example have
# additional parameters such as "amplitude" or "frequency". As our dummy_dmm doesn't have those parameters,
# we cannot use them here. Each parameter has to be mapped to a parameter of a QCoDeS instrument later.

parameters = {
   		"ohmic": {
   			"current": {
   				"type": "gettable",
   				"break_conditions": ["val > 0.9"],
   			},
   		},
   		"topgate": {
   			"voltage": {
   				"type": "dynamic",
   				"setpoints": np.linspace(0, 0.5, 100),
   				"delay": 0.01,
   			}
   		},
   		"barriers": {
   			"voltage": {
   				"type": "dynamic",
   				"setpoints": np.linspace(0, 0.4, 100),
   				"delay": 0.01,
   			},
   		},
   	}

#%%
script = Generic_1D_parallel_Sweep()
script.setup(parameters, metadata = None)

# map measurement gates to instrument gates
map_terminals_gui(station.components, script.gate_parameters)

# run script
script.run()
